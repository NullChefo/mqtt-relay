# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Containerize

# https://github.com/csharpfritz/TagzApp/blob/main/.github/workflows/dotnet.yml

on:
  push:
    branches: ["main"]
#    paths: ["src/**"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, closed]
#    paths: ["src/**"]
  workflow_dispatch:

jobs:
  build:
#    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./src
    env:
      REGISTRY: ghcr.io
      IMAGE: nullchefo/mqtt-relay-chiseled
      TAG: latest
      
      
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Check Out Response Code
      uses: actions/checkout@v4
#      with:
#        fetch-depth: 0
    - run: echo "The ${{github.repository}} has been cloned to the runner"
    - run: echo "The workflow is now ready to test your code on the runner"
# https://github.com/actions/setup-dotnet
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: ./global.json
        
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v1
      
    - name: Cache NuGet Packages
      id: nuget-packages
      uses: actions/cache@v3
      env:
        cache-name: nuget-package-cache
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-${{ env.cache-name }}

    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
#      working-directory: ./src/MqttRelay.Blazor
    - name: Test
      run: dotnet test --no-build --verbosity normal
#      working-directory: ./src/MqttRelay.UnitTest


#    - name: Containerize 0
#      # /p:Environment=Production  /p:ASPNETCORE_ENVIRONMENT=Production 
#      run:  dotnet publish /p:PublishTrimmed=true /p:PublishSelfContained=true -c Release --os linux --arch x64 /p:ContainerFamily=jammy-chiseled-extra /p:ContainerRepository=mqtt-relay-chiseled /t:PublishContainer 

    - name: Containerize-x64
      # /p:Environment=Production  /p:ASPNETCORE_ENVIRONMENT=Production 
      run:  dotnet publish -c Release --os linux --arch x64 /p:PublishTrimmed=true /p:PublishSelfContained=true /p:ContainerFamily=jammy-chiseled-extra /t:PublishContainer  -p:ContainerImageTag=${{ env.TAG }}-x64 -p:ContainerRepository=${{ env.IMAGE }} -p:ContainerRegistry=${{ env.REGISTRY }}
      

    - name: Containerize-arm64
      # /p:Environment=Production  /p:ASPNETCORE_ENVIRONMENT=Production 
      run: dotnet publish -c Release --os linux --arch arm64 /p:PublishTrimmed=true /p:PublishSelfContained=true /p:ContainerFamily=jammy-chiseled-extra /t:PublishContainer -p:ContainerImageTag=${{ env.TAG }}-arm64 -p:ContainerRepository=${{ env.IMAGE }} -p:ContainerRegistry=${{ env.REGISTRY }}
      
      
      
      
      #    - name: Publish
#      run: dotnet publish --os linux --arch x64 -t:PublishContainer /p:ContainerImageTags='"${{ steps.nbgv_version.outputs.Version }};latest"' /p:ContainerRegistry=ghcr.io
#      working-directory: ./src/MqttRelay.Blazor

      #Deploy the image to the Docker registry
    - name: Docker list images
      run: docker images


#    - name: Tag the Docker image
#      run: docker tag mqtt-relay-chiseled ghcr.io/nullchefo/mqtt-relay-chiseled
#
#    - name: Tag the Docker image as native
#      run: docker tag ghcr.io/nullchefo/mqtt-relay-chiseled ghcr.io/nullchefo/mqtt-relay-chiseled:latest
#
#    - name: Push Images to Docker Registry
#      run: docker push -a ghcr.io/nullchefo/mqtt-relay-chiseled



    - name: Create Docker manifest
      run: docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-x64 ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-arm64

    - name: Push Docker manifest
      run: docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}
    
    
    #playwright:
    # if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    # name: "Playwright Tests"
    # runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ./src/MqttRelay.WebTest
    # timeout-minutes: 10
    # container:
    #   image: mcr.microsoft.com/playwright/dotnet:v1.37.1-jammy
    #   options: --ipc=host
    # steps:
    #   - uses: actions/checkout@v3
    #   - name: Setup dotnet
    #     uses: actions/setup-dotnet@v3
    #     with:
    #       global-json-file: ./global.json
    #   - run: dotnet build
    #   - name: Execute Playwright tests
    #     env:
    #       TestHostStartDelay: 1000
    #     run: dotnet test --no-build